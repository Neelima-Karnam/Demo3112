# variables:
# - name: BuildParameters.RestoreBuildProjects
#   value: '**/*.csproj'
# - name: BuildParameters.TestProjects
#   value: '**/*[Tt]ests/*.csproj'
# trigger:
#   branches:
#     include:
#     - refs/heads/master
# name: $(date:yyyyMMdd)$(rev:.r)
# jobs:
# - job: Job_1
#   displayName: Agent job 1
#   pool:
#     name: neelimapool
#   steps:
#   - checkout: self
#     fetchDepth: 1
#   - task: DotNetCoreCLI@2
#     displayName: Restore
#     inputs:
#       ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
#       command: restore
#       projects: $(BuildParameters.RestoreBuildProjects)
#       feedRestore: 7f74b742-1ccf-4312-b0e0-685a0bc22a03
#   - task: DotNetCoreCLI@2
#     displayName: Build
#     inputs:
#       ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
#       projects: $(BuildParameters.RestoreBuildProjects)
#       arguments: --configuration $(BuildConfiguration)
#   - task: DotNetCoreCLI@2
#     displayName: Test
#     enabled: False
#     inputs:
#       command: test
#       projects: $(BuildParameters.TestProjects)
#       arguments: --configuration $(BuildConfiguration)
#   - task: DotNetCoreCLI@2
#     displayName: Publish
#     inputs:
#       ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
#       command: publish
#       publishWebProjects: True
#       projects: $(BuildParameters.RestoreBuildProjects)
#       arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
#       zipAfterPublish: True
#   - task: PublishBuildArtifacts@1
#     displayName: Publish Artifact
#     condition: succeededOrFailed()
#     inputs:
#       PathtoPublish: $(build.artifactstagingdirectory)
#       TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
# ...

variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.TestProjects
  value: '**/*[Tt]ests/*.csproj'
- name: BuildConfiguration
  value: 'Release'
- name: buildOutputFolder
  value: $(Build.ArtifactStagingDirectory)

trigger:
  branches:
    include:
    - refs/heads/master

name: $(date:yyyyMMdd)$(rev:.r)

jobs:
- job: Job_1
  displayName: 'Build and Publish'
  pool:
    name: 'neelimapool'  
  steps:
  - checkout: self
    fetchDepth: 1
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
      command: restore
      projects: $(BuildParameters.RestoreBuildProjects)
      feedRestore: 7f74b742-1ccf-4312-b0e0-685a0bc22a03
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
      projects: $(BuildParameters.RestoreBuildProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    enabled: False  
    inputs:
      command: test
      projects: $(BuildParameters.TestProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: DotNetCoreCLI@2
    displayName: 'Publish'
    inputs:
      ConnectedServiceName: 72f637b9-7a43-4ad0-8abc-87ce77f2c19c
      command: publish
      publishWebProjects: True
      projects: $(BuildParameters.RestoreBuildProjects)
      arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
      zipAfterPublish: True
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: 'drop'
      publishLocation: 'Container'

- job: Deploy
  displayName: 'Deploy to IIS Web Server'
  dependsOn: Job_1
  condition: succeeded()
  pool:
    name: 'neelimapool'  
  steps:

    - task: DownloadBuildArtifacts@0
      displayName: 'Download build artifacts'
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        definition: '33' 
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(build.artifactstagingdirectory)'

    - task: ExtractFiles@1
      displayName: 'Extract published files'
      inputs:
        archiveFilePatterns: '$(build.artifactstagingdirectory)/drop/*.zip'  # Path to the zip file in the 'drop' folder
        destinationFolder: '$(build.artifactstagingdirectory)/extracted'  # Destination folder for the extracted files

    - task: CopyFiles@2
      displayName: 'Copy Web API files to IIS folder'
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)/extracted'
        Contents: '**'
        TargetFolder: 'C:\inetpub\wwwroot\newfolder'
    
    - task: CmdLine@2
      inputs:
          script: |
            echo Artifact staging directory after deployment
            echo  $(Build.ArtifactStagingDirectory)
            echo Hello world from deployment!
            echo Sources Directory
            echo  $(Build.SourcesDirectory)
